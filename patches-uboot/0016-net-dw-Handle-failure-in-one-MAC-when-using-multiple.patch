From c6eaead3c58bea39037820a7dddf64eda8af94ed Mon Sep 17 00:00:00 2001
From: Phil Edworthy <phil.edworthy@renesas.com>
Date: Thu, 4 May 2017 15:54:03 +0100
Subject: [PATCH] net: dw: Handle failure in one MAC when using multiple MACs

At the moment, if there is a failure in designware_initialize(), the
Eth device is still registered. This is not a problem when you have a
single MAC, as the error will be reported back up to your board_eth_init()
function, and so the system knows there is no Ethernet available.

However, when you attempt to initialise multiple MACs, and one fails (which
is always the case when one of them tries to talk to an Extension Board that
is not present), the system will have multiple MACs registered, some of which
don't work. If it happens to be the first MAC that fails, any Ethernet cmd
will fail catastrophically when trying to talk to the PHY.

Signed-off-by: Phil Edworthy <phil.edworthy@renesas.com>
---
 drivers/net/designware.c | 17 ++++++++++-------
 1 file changed, 10 insertions(+), 7 deletions(-)

diff --git a/drivers/net/designware.c b/drivers/net/designware.c
index 8305ef2..b29cdc7 100644
--- a/drivers/net/designware.c
+++ b/drivers/net/designware.c
@@ -472,6 +472,7 @@ static int _dw_free_pkt(struct dw_eth_dev *priv)
 	return 0;
 }
 
+static int nr_dw_macs;
 static int dw_phy_init(struct dw_eth_dev *priv, void *dev)
 {
 	struct phy_device *phydev;
@@ -481,18 +482,16 @@ static int dw_phy_init(struct dw_eth_dev *priv, void *dev)
 	mask = 1 << CONFIG_PHY_ADDR;
 #endif
 
-#ifndef CONFIG_DM_ETH
-	struct eth_device *edev = (struct eth_device *)dev;
-
 #ifdef CONFIG_PHY1_ADDR
-	if (edev->index == 1)
+	if (nr_dw_macs == 1)
 		mask = 1 << CONFIG_PHY1_ADDR;
 #endif
-#endif
+	nr_dw_macs++;
 
 	phydev = phy_find_by_mask(priv->bus, mask, priv->interface);
-	if (!phydev)
+	if (!phydev) {
 		return -ENODEV;
+	}
 
 	phy_connect_dev(phydev, dev);
 
@@ -550,6 +549,7 @@ int designware_initialize_fixed_link(ulong base_addr, u32 interface, int speed)
 {
 	struct eth_device *dev;
 	struct dw_eth_dev *priv;
+	int ret;
 
 	dev = (struct eth_device *) malloc(sizeof(struct eth_device));
 	if (!dev)
@@ -597,7 +597,10 @@ int designware_initialize_fixed_link(ulong base_addr, u32 interface, int speed)
 	dw_mdio_init(dev->name, priv->mac_regs_p);
 	priv->bus = miiphy_get_dev_by_name(dev->name);
 
-	return dw_phy_init(priv, dev);
+	ret = dw_phy_init(priv, dev);
+	if (ret)
+		eth_unregister(dev);
+	return ret;
 }
 
 int designware_initialize(ulong base_addr, u32 interface)
-- 
2.7.4

