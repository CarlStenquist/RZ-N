From 2f35753df06ec28f5db6fa7d08e893c10679d71d Mon Sep 17 00:00:00 2001
From: Phil Edworthy <phil.edworthy@renesas.com>
Date: Wed, 4 Jan 2017 10:14:19 +0000
Subject: [PATCH] usb: host: rmobile: Use standard PCI constants and reflect
 Linux

Since this is a PCI host with the USB Controller attached to PCI,
use PCI constants where possible. Whilst doing so, change the code
to reflect what the Linux driver does.

Signed-off-by: Phil Edworthy <phil.edworthy@renesas.com>
---
 arch/arm/mach-rmobile/include/mach/ehci-rmobile.h | 147 -------------------
 drivers/usb/host/ehci-rmobile.c                   | 168 ++++++++++++++--------
 drivers/usb/host/ehci-rmobile.h                   | 122 ++++++++++++++++
 3 files changed, 232 insertions(+), 205 deletions(-)
 delete mode 100644 arch/arm/mach-rmobile/include/mach/ehci-rmobile.h
 create mode 100644 drivers/usb/host/ehci-rmobile.h

diff --git a/arch/arm/mach-rmobile/include/mach/ehci-rmobile.h b/arch/arm/mach-rmobile/include/mach/ehci-rmobile.h
deleted file mode 100644
index 463654e..0000000
--- a/arch/arm/mach-rmobile/include/mach/ehci-rmobile.h
+++ /dev/null
@@ -1,147 +0,0 @@
-/*
- *  Copyright (C) 2013,2014 Renesas Electronics Corporation
- *  Copyright (C) 2014 Nobuhiro Iwamatsu <nobuhiro.iwamatsu.yj@renesas.com>
- *
- *  SPDX-License-Identifier:     GPL-2.0
- */
-
-#ifndef __EHCI_RMOBILE_H__
-#define __EHCI_RMOBILE_H__
-
-/* Register offset */
-#define OHCI_OFFSET	0x00
-#define OHCI_SIZE	0x1000
-#define EHCI_OFFSET	0x1000
-#define EHCI_SIZE	0x1000
-
-#define EHCI_USBCMD	(EHCI_OFFSET + 0x0020)
-
-/* USBCTR */
-#define DIRPD		(1 << 8)
-#define PLL_RST		(1 << 2)
-#define PCICLK_MASK	(1 << 1)
-#define USBH_RST	(1 << 0)
-
-/* CMND_STS */
-#define SERREN		(1 << 8)
-#define PERREN		(1 << 6)
-#define MASTEREN	(1 << 2)
-#define MEMEN		(1 << 1)
-
-/* PCIAHB_WIN1_CTR and PCIAHB_WIN2_CTR */
-#define PCIAHB_WIN_PREFETCH	((1 << 1)|(1 << 0))
-
-/* AHBPCI_WIN1_CTR */
-#define PCIWIN1_PCICMD		((1 << 3)|(1 << 1))
-#define AHB_CFG_AHBPCI		0x40000000
-#define AHB_CFG_HOST		0x80000000
-
-/* AHBPCI_WIN2_CTR */
-#define PCIWIN2_PCICMD		((1 << 2)|(1 << 1))
-
-/* PCI_INT_ENABLE */
-#define USBH_PMEEN		(1 << 19)
-#define USBH_INTBEN		(1 << 17)
-#define USBH_INTAEN		(1 << 16)
-
-/* AHB_BUS_CTR */
-#define SMODE_READY_CTR		(1 << 17)
-#define SMODE_READ_BURST	(1 << 16)
-#define MMODE_HBUSREQ		(1 << 7)
-#define MMODE_BOUNDARY		((1 << 6)|(1 << 5))
-#define MMODE_BURST_WIDTH	((1 << 4)|(1 << 3))
-#define MMODE_SINGLE_MODE	((1 << 4)|(1 << 3))
-#define MMODE_WR_INCR		(1 << 2)
-#define MMODE_BYTE_BURST	(1 << 1)
-#define MMODE_HTRANS		(1 << 0)
-
-/* PCI_ARBITER_CTR */
-#define PCIBUS_PARK_TIMER       0x00FF0000
-#define PCIBUS_PARK_TIMER_SET   0x00070000
-#define PCIBP_MODE		(1 << 12)
-#define PCIREQ7                 (1 << 7)
-#define PCIREQ6                 (1 << 6)
-#define PCIREQ5                 (1 << 5)
-#define PCIREQ4                 (1 << 4)
-#define PCIREQ3                 (1 << 3)
-#define PCIREQ2                 (1 << 2)
-#define PCIREQ1                 (1 << 1)
-#define PCIREQ0                 (1 << 0)
-
-#define SMSTPCR7        0xE615014C
-#define SMSTPCR703      (1 << 3)
-
-/* Init AHB master and slave functions of the host logic */
-#define AHB_BUS_CTR_INIT \
-	(SMODE_READY_CTR | MMODE_HBUSREQ | MMODE_WR_INCR | \
-	 MMODE_BYTE_BURST | MMODE_HTRANS)
-
-#define USBCTR_WIN_SIZE_1GB	0x800
-
-/* PCI Configuration Registers */
-#define PCI_CONF_OHCI_OFFSET	0x10000
-#define PCI_CONF_EHCI_OFFSET	0x10100
-struct ahb_pciconf {
-	u32 vid_did;
-	u32 cmnd_sts;
-	u32 rev;
-	u32 cache_line;
-	u32 basead;
-};
-
-/* PCI Configuration Registers for AHB-PCI Bridge Registers */
-#define PCI_CONF_AHBPCI_OFFSET	0x10000
-struct ahbconf_pci_bridge {
-	u32 vid_did;		/* 0x00 */
-	u32 cmnd_sts;
-	u32 revid_cc;
-	u32 cls_lt_ht_bist;
-	u32 basead;		/* 0x10 */
-	u32 win1_basead;
-	u32 win2_basead;
-	u32 dummy0[5];
-	u32 ssvdi_ssid;		/* 0x2C */
-	u32 dummy1[4];
-	u32 intr_line_pin;
-};
-
-/* AHB-PCI Bridge PCI Communication Registers */
-#define AHBPCI_OFFSET	0x10800
-struct ahbcom_pci_bridge {
-	u32 pciahb_win1_ctr;	/* 0x00 */
-	u32 pciahb_win2_ctr;
-	u32 pciahb_dct_ctr;
-	u32 dummy0;
-	u32 ahbpci_win1_ctr;	/* 0x10 */
-	u32 ahbpci_win2_ctr;
-	u32 dummy1;
-	u32 ahbpci_dct_ctr;
-	u32 pci_int_enable;	/* 0x20 */
-	u32 pci_int_status;
-	u32 dummy2[2];
-	u32 ahb_bus_ctr;	/* 0x30 */
-	u32 usbctr;
-	u32 dummy3[2];
-	u32 pci_arbiter_ctr;	/* 0x40 */
-	u32 dummy4;
-	u32 pci_unit_rev;	/* 0x48 */
-};
-
-struct rmobile_ehci_reg {
-	u32 hciversion;		/* hciversion/caplength */
-	u32 hcsparams;		/* hcsparams */
-	u32 hccparams;		/* hccparams */
-	u32 hcsp_portroute;	/* hcsp_portroute */
-	u32 usbcmd;		/* usbcmd */
-	u32 usbsts;		/* usbsts */
-	u32 usbintr;		/* usbintr */
-	u32 frindex;		/* frindex */
-	u32 ctrldssegment;	/* ctrldssegment */
-	u32 periodiclistbase;	/* periodiclistbase */
-	u32 asynclistaddr;	/* asynclistaddr */
-	u32 dummy[9];
-	u32 configflag;		/* configflag */
-	u32 portsc;		/* portsc */
-};
-
-#endif /* __EHCI_RMOBILE_H__ */
diff --git a/drivers/usb/host/ehci-rmobile.c b/drivers/usb/host/ehci-rmobile.c
index 7fe79ef..11f7c1c 100644
--- a/drivers/usb/host/ehci-rmobile.c
+++ b/drivers/usb/host/ehci-rmobile.c
@@ -9,8 +9,9 @@
 
 #include <common.h>
 #include <asm/io.h>
-#include <asm/arch/ehci-rmobile.h>
 #include "ehci.h"
+#include "ehci-rmobile.h"
+#include <pci.h>
 
 #if defined(CONFIG_R8A7740)
 static u32 usb_base_address[] = {
@@ -32,20 +33,24 @@ static u32 usb_base_address[] = {
 #error rmobile EHCI USB driver not supported on this platform
 #endif
 
+#define EHCI_USBCMD_OFF		0x20
+#define EHCI_USBCMD_HCRESET	(1 << 1)
+
 int ehci_hcd_stop(int index)
 {
 	int i;
-	u32 base;
-	struct ahbcom_pci_bridge *ahbcom_pci;
+	u32 base, reg, ehci;
 
 	base = usb_base_address[index];
-	ahbcom_pci = (struct ahbcom_pci_bridge *)(base + AHBPCI_OFFSET);
-	writel(0, &ahbcom_pci->ahb_bus_ctr);
+	reg = base + PCI_CONF_AHBPCI_OFFSET;
+	ehci = base + EHCI_OFFSET;
+
+	writel(0, reg + RCAR_AHB_BUS_CTR_REG);
 
 	/* reset ehci */
-	setbits_le32(base + EHCI_USBCMD, CMD_RESET);
+	setbits_le32(ehci + EHCI_USBCMD_OFF, EHCI_USBCMD_HCRESET);
 	for (i = 100; i > 0; i--) {
-		if (!(readl(base + EHCI_USBCMD) & CMD_RESET))
+		if (!(readl(ehci + EHCI_USBCMD_OFF) & EHCI_USBCMD_HCRESET))
 			break;
 		udelay(100);
 	}
@@ -53,73 +58,120 @@ int ehci_hcd_stop(int index)
 	if (!i)
 		printf("error : ehci(%d) reset failed.\n", index);
 
+	/* Turn off IP clock */
 	if (index == (ARRAY_SIZE(usb_base_address) - 1))
 		setbits_le32(SMSTPCR7, SMSTPCR703);
 
 	return 0;
 }
 
+static u32 pci_config_fn(u32 reg, int devfn, u32 addr)
+{
+	/* devfn 0 is the root */
+	/* devfn 1 is OHCI */
+	/* devfn 2 is ECHI */
+	u32 ctrl = devfn ? RCAR_AHBPCI_WIN1_DEVICE | RCAR_AHBPCI_WIN_CTR_CFG :
+		     RCAR_AHBPCI_WIN1_HOST | RCAR_AHBPCI_WIN_CTR_CFG;
+	u32 tmp = readl(reg + RCAR_AHBPCI_WIN1_CTR_REG);
+
+	if (tmp != ctrl)
+		writel(ctrl, reg + RCAR_AHBPCI_WIN1_CTR_REG);
+
+	/* this simple redirects to the ECHI or OCHI config space */
+	if (devfn)
+		addr += (devfn - 1) * 0x100;
+
+	return addr;
+}
+
+static void pci_writel_fn(u32 reg, int devfn, u32 val, u32 addr)
+{
+	addr = pci_config_fn(reg, devfn, addr);
+	writel(val, reg + addr);
+}
+
+static void pci_writew_fn(u32 reg, int devfn, u16 val, u32 addr)
+{
+	addr = pci_config_fn(reg, devfn, addr);
+	writew(val, reg + addr);
+}
+
+/*
+ * This code sets up the PCI Bridge so that there is:
+ *  * Two outbound (AHB to PCI) address windows:
+ *     a) the PCI Bridge Configuration registers
+ *     b) the OHCI/EHCI Configuration registers.
+ *  * One inbound (PCI to AHB) address window, so the OHCI/EHCI controller has
+ *    read/write access to the data in DDR.
+ */
 int ehci_hcd_init(int index, enum usb_init_type init,
 	struct ehci_hccr **hccr, struct ehci_hcor **hcor)
 {
-	u32 base;
-	u32 phys_base;
+	u32 base, reg;
 	struct rmobile_ehci_reg *rehci;
-	struct ahbcom_pci_bridge *ahbcom_pci;
-	struct ahbconf_pci_bridge *ahbconf_pci;
-	struct ahb_pciconf *ahb_pciconf_ohci;
-	struct ahb_pciconf *ahb_pciconf_ehci;
 	uint32_t cap_base;
-
+	u32 val;
+	/* The mask applied to the window addr depends on the window size */
+	u32 win1_addr = CONFIG_SYS_SDRAM_BASE & 0xc0000000;
 	base = usb_base_address[index];
-	phys_base = base;
+
+	/* Turn on IP clock */
 	if (index == 0)
 		clrbits_le32(SMSTPCR7, SMSTPCR703);
 
+	reg = base + PCI_CONF_AHBPCI_OFFSET;
 	rehci = (struct rmobile_ehci_reg *)(base + EHCI_OFFSET);
-	ahbcom_pci = (struct ahbcom_pci_bridge *)(base + AHBPCI_OFFSET);
-	ahbconf_pci =
-		(struct ahbconf_pci_bridge *)(base + PCI_CONF_AHBPCI_OFFSET);
-	ahb_pciconf_ohci = (struct ahb_pciconf *)(base + PCI_CONF_OHCI_OFFSET);
-	ahb_pciconf_ehci = (struct ahb_pciconf *)(base + PCI_CONF_EHCI_OFFSET);
-
-	/* Clock & Reset & Direct Power Down */
-	clrsetbits_le32(&ahbcom_pci->usbctr,
-			(DIRPD | PCICLK_MASK | USBH_RST), USBCTR_WIN_SIZE_1GB);
-	clrbits_le32(&ahbcom_pci->usbctr, PLL_RST);
-
-	/* AHB-PCI Bridge Communication Registers */
-	writel(AHB_BUS_CTR_INIT, &ahbcom_pci->ahb_bus_ctr);
-	writel((CONFIG_SYS_SDRAM_BASE & 0xf0000000) | PCIAHB_WIN_PREFETCH,
-	       &ahbcom_pci->pciahb_win1_ctr);
-	writel(0xf0000000 | PCIAHB_WIN_PREFETCH,
-	       &ahbcom_pci->pciahb_win2_ctr);
-	writel(phys_base | PCIWIN2_PCICMD, &ahbcom_pci->ahbpci_win2_ctr);
-
-	setbits_le32(&ahbcom_pci->pci_arbiter_ctr,
-		     PCIBP_MODE | PCIREQ1 | PCIREQ0);
-
-	/* PCI Configuration Registers for AHBPCI */
-	writel(PCIWIN1_PCICMD | AHB_CFG_AHBPCI,
-	       &ahbcom_pci->ahbpci_win1_ctr);
-	writel(phys_base + AHBPCI_OFFSET, &ahbconf_pci->basead);
-	writel(CONFIG_SYS_SDRAM_BASE & 0xf0000000, &ahbconf_pci->win1_basead);
-	writel(0xf0000000, &ahbconf_pci->win2_basead);
-	writel(SERREN | PERREN | MASTEREN | MEMEN,
-	       &ahbconf_pci->cmnd_sts);
-
-	/* PCI Configuration Registers for EHCI */
-	writel(PCIWIN1_PCICMD | AHB_CFG_HOST, &ahbcom_pci->ahbpci_win1_ctr);
-	writel(phys_base + OHCI_OFFSET, &ahb_pciconf_ohci->basead);
-	writel(phys_base + EHCI_OFFSET, &ahb_pciconf_ehci->basead);
-	writel(SERREN | PERREN | MASTEREN | MEMEN,
-	       &ahb_pciconf_ohci->cmnd_sts);
-	writel(SERREN | PERREN | MASTEREN | MEMEN,
-	       &ahb_pciconf_ehci->cmnd_sts);
-
-	/* Enable PCI interrupt */
-	setbits_le32(&ahbcom_pci->pci_int_enable,
-		     USBH_PMEEN | USBH_INTBEN | USBH_INTAEN);
+
+	/* Disable Direct Power Down State and assert reset */
+	val = readl(reg + RCAR_USBCTR_REG);
+	val &= ~RCAR_USBCTR_DIRPD;
+	val |= RCAR_USBCTR_USBH_RST;
+	writel(val, reg + RCAR_USBCTR_REG);
+	udelay(4);
+
+	/* De-assert reset and set PCIAHB window1 size */
+	val &= ~(RCAR_USBCTR_PCIAHB_WIN1_MASK | RCAR_USBCTR_PCICLK_MASK |
+		 RCAR_USBCTR_USBH_RST | RCAR_USBCTR_PLL_RST);
+	val |= RCAR_USBCTR_PCIAHB_WIN1_1G;
+	writel(val, reg + RCAR_USBCTR_REG);
+	udelay(100);
+
+	/* Configure AHB master and slave modes */
+	writel(RCAR_AHB_BUS_MODE, reg + RCAR_AHB_BUS_CTR_REG);
+
+	/* Configure PCI arbiter */
+	val = readl(reg + RCAR_PCI_ARBITER_CTR_REG);
+	val |= RCAR_PCI_ARBITER_PCIREQ0 | RCAR_PCI_ARBITER_PCIREQ1 |
+	       RCAR_PCI_ARBITER_PCIBP_MODE;
+	writel(val, reg + RCAR_PCI_ARBITER_CTR_REG);
+
+	/* PCI-AHB mapping */
+	writel(win1_addr | RCAR_PCIAHB_PREFETCH16,
+		  reg + RCAR_PCIAHB_WIN1_CTR_REG);
+
+	/* AHB-PCI mapping: OHCI/EHCI registers */
+	val = base | RCAR_AHBPCI_WIN_CTR_MEM;
+	writel(val, reg + RCAR_AHBPCI_WIN2_CTR_REG);
+
+	/* Configure interrupts */
+	writel(RCAR_PCI_INT_ALLERRORS, reg + RCAR_PCI_INT_ENABLE_REG);
+
+	/* Set AHB-PCI bridge PCI communication area address */
+	val = reg;
+	pci_writel_fn(reg, 0, val, PCI_BASE_ADDRESS_0);
+
+	/* Set PCI-AHB Window1 address */
+	val = win1_addr | PCI_BASE_ADDRESS_MEM_PREFETCH;
+	pci_writel_fn(reg, 0, val, PCI_BASE_ADDRESS_1);
+
+	val = PCI_COMMAND_SERR | PCI_COMMAND_PARITY | PCI_COMMAND_MEMORY | PCI_COMMAND_MASTER;
+	pci_writew_fn(reg, 0, val, PCI_COMMAND);
+
+	/* PCI Configuration Registers for EHCI/OHCI */
+	pci_writel_fn(reg, 1, base + OHCI_OFFSET, PCI_BASE_ADDRESS_0);
+	pci_writew_fn(reg, 1, val, PCI_COMMAND);
+	pci_writel_fn(reg, 2, base + EHCI_OFFSET, PCI_BASE_ADDRESS_0);
+	pci_writew_fn(reg, 2, val, PCI_COMMAND);
 
 	*hccr = (struct ehci_hccr *)((uint32_t)&rehci->hciversion);
 	cap_base = ehci_readl(&(*hccr)->cr_capbase);
diff --git a/drivers/usb/host/ehci-rmobile.h b/drivers/usb/host/ehci-rmobile.h
new file mode 100644
index 0000000..d8b2a0e
--- /dev/null
+++ b/drivers/usb/host/ehci-rmobile.h
@@ -0,0 +1,122 @@
+/*
+ *  Copyright (C) 2013,2014 Renesas Electronics Corporation
+ *  Copyright (C) 2014 Nobuhiro Iwamatsu <nobuhiro.iwamatsu.yj@renesas.com>
+ *
+ *  SPDX-License-Identifier:     GPL-2.0
+ */
+
+#ifndef __EHCI_RMOBILE_H__
+#define __EHCI_RMOBILE_H__
+
+/* Register offset */
+#define OHCI_OFFSET	0x00
+#define OHCI_SIZE	0x1000
+#define EHCI_OFFSET	0x1000
+#define EHCI_SIZE	0x1000
+
+#define SMSTPCR7        0xE615014C
+#define SMSTPCR703      (1 << 3)
+
+/* PCI Configuration Registers */
+#define PCI_CONF_OHCI_OFFSET	0x10000
+#define PCI_CONF_EHCI_OFFSET	0x10100
+struct ahb_pciconf {
+	u32 vid_did;
+	u32 cmnd_sts;
+	u32 rev;
+	u32 cache_line;
+	u32 basead;
+};
+
+/* PCI Configuration Registers for AHB-PCI Bridge Registers */
+#define PCI_CONF_AHBPCI_OFFSET	0x10000
+
+struct rmobile_ehci_reg {
+	u32 hciversion;		/* hciversion/caplength */
+	u32 hcsparams;		/* hcsparams */
+	u32 hccparams;		/* hccparams */
+	u32 hcsp_portroute;	/* hcsp_portroute */
+	u32 usbcmd;		/* usbcmd */
+	u32 usbsts;		/* usbsts */
+	u32 usbintr;		/* usbintr */
+	u32 frindex;		/* frindex */
+	u32 ctrldssegment;	/* ctrldssegment */
+	u32 periodiclistbase;	/* periodiclistbase */
+	u32 asynclistaddr;	/* asynclistaddr */
+	u32 dummy[9];
+	u32 configflag;		/* configflag */
+	u32 portsc;		/* portsc */
+};
+
+/* AHB-PCI Bridge PCI communication registers */
+#define RCAR_AHBPCI_PCICOM_OFFSET	0x800
+
+#define RCAR_PCIAHB_WIN1_CTR_REG	(RCAR_AHBPCI_PCICOM_OFFSET + 0x00)
+#define RCAR_PCIAHB_WIN2_CTR_REG	(RCAR_AHBPCI_PCICOM_OFFSET + 0x04)
+#define RCAR_PCIAHB_PREFETCH0		0x0
+#define RCAR_PCIAHB_PREFETCH4		0x1
+#define RCAR_PCIAHB_PREFETCH8		0x2
+#define RCAR_PCIAHB_PREFETCH16		0x3
+
+#define RCAR_AHBPCI_WIN1_CTR_REG	(RCAR_AHBPCI_PCICOM_OFFSET + 0x10)
+#define RCAR_AHBPCI_WIN2_CTR_REG	(RCAR_AHBPCI_PCICOM_OFFSET + 0x14)
+#define RCAR_AHBPCI_WIN_CTR_MEM		(3 << 1)
+#define RCAR_AHBPCI_WIN_CTR_CFG		(5 << 1)
+#define RCAR_AHBPCI_WIN1_HOST		(1 << 30)
+#define RCAR_AHBPCI_WIN1_DEVICE		(1 << 31)
+
+#define RCAR_PCI_INT_ENABLE_REG		(RCAR_AHBPCI_PCICOM_OFFSET + 0x20)
+#define RCAR_PCI_INT_STATUS_REG		(RCAR_AHBPCI_PCICOM_OFFSET + 0x24)
+#define RCAR_PCI_INT_SIGTABORT		(1 << 0)
+#define RCAR_PCI_INT_SIGRETABORT	(1 << 1)
+#define RCAR_PCI_INT_REMABORT		(1 << 2)
+#define RCAR_PCI_INT_PERR		(1 << 3)
+#define RCAR_PCI_INT_SIGSERR		(1 << 4)
+#define RCAR_PCI_INT_RESERR		(1 << 5)
+#define RCAR_PCI_INT_WIN1ERR		(1 << 12)
+#define RCAR_PCI_INT_WIN2ERR		(1 << 13)
+#define RCAR_PCI_INT_A			(1 << 16)
+#define RCAR_PCI_INT_B			(1 << 17)
+#define RCAR_PCI_INT_PME		(1 << 19)
+#define RCAR_PCI_INT_ALLERRORS (RCAR_PCI_INT_SIGTABORT		| \
+				RCAR_PCI_INT_SIGRETABORT	| \
+				RCAR_PCI_INT_SIGRETABORT	| \
+				RCAR_PCI_INT_REMABORT		| \
+				RCAR_PCI_INT_PERR		| \
+				RCAR_PCI_INT_SIGSERR		| \
+				RCAR_PCI_INT_RESERR		| \
+				RCAR_PCI_INT_WIN1ERR		| \
+				RCAR_PCI_INT_WIN2ERR)
+
+#define RCAR_AHB_BUS_CTR_REG		(RCAR_AHBPCI_PCICOM_OFFSET + 0x30)
+#define RCAR_AHB_BUS_MMODE_HTRANS	(1 << 0)
+#define RCAR_AHB_BUS_MMODE_BYTE_BURST	(1 << 1)
+#define RCAR_AHB_BUS_MMODE_WR_INCR	(1 << 2)
+#define RCAR_AHB_BUS_MMODE_HBUS_REQ	(1 << 7)
+#define RCAR_AHB_BUS_SMODE_READYCTR	(1 << 17)
+#define RCAR_AHB_BUS_MODE		(RCAR_AHB_BUS_MMODE_HTRANS |	\
+					RCAR_AHB_BUS_MMODE_BYTE_BURST |	\
+					RCAR_AHB_BUS_MMODE_WR_INCR |	\
+					RCAR_AHB_BUS_MMODE_HBUS_REQ |	\
+					RCAR_AHB_BUS_SMODE_READYCTR)
+
+#define RCAR_USBCTR_REG			(RCAR_AHBPCI_PCICOM_OFFSET + 0x34)
+#define RCAR_USBCTR_USBH_RST		(1 << 0)
+#define RCAR_USBCTR_PCICLK_MASK		(1 << 1)
+#define RCAR_USBCTR_PLL_RST		(1 << 2)
+#define RCAR_USBCTR_DIRPD		(1 << 8)
+#define RCAR_USBCTR_PCIAHB_WIN2_EN	(1 << 9)
+#define RCAR_USBCTR_PCIAHB_WIN1_256M	(0 << 10)
+#define RCAR_USBCTR_PCIAHB_WIN1_512M	(1 << 10)
+#define RCAR_USBCTR_PCIAHB_WIN1_1G	(2 << 10)
+#define RCAR_USBCTR_PCIAHB_WIN1_2G	(3 << 10)
+#define RCAR_USBCTR_PCIAHB_WIN1_MASK	(3 << 10)
+
+#define RCAR_PCI_ARBITER_CTR_REG	(RCAR_AHBPCI_PCICOM_OFFSET + 0x40)
+#define RCAR_PCI_ARBITER_PCIREQ0	(1 << 0)
+#define RCAR_PCI_ARBITER_PCIREQ1	(1 << 1)
+#define RCAR_PCI_ARBITER_PCIBP_MODE	(1 << 12)
+
+#define RCAR_PCI_UNIT_REV_REG		(RCAR_AHBPCI_PCICOM_OFFSET + 0x48)
+
+#endif /* __EHCI_RMOBILE_H__ */
-- 
2.7.4

